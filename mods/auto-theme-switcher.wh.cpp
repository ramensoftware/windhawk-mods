// ==WindhawkMod==
// @id              auto-theme-switcher
// @name            Auto Theme Switcher
// @description     Automatically changes between light and dark mode/themes based on a set schedule
// @version         1.0
// @author          tinodin
// @github          https://github.com/tinodin
// @include         explorer.exe
// ==/WindhawkMod==

// ==WindhawkModSettings==
/*
- Light: 07:00
  $name: Light mode time
- Dark: 19:00
  $name: Dark mode time
- LightThemePath: "C:\\Windows\\Resources\\Themes\\aero.theme"
  $name: Light mode theme path (.theme)
- DarkThemePath: "C:\\Windows\\Resources\\Themes\\dark.theme"
  $name: Dark mode theme path (.theme)
- LockScreen: true
  $name: Apply Wallpaper to Lock screen
*/
// ==/WindhawkModSettings==

#include <windows.h>
#include <ctime>
#include <thread>
#include <string>
#include <fstream>

const unsigned char themeToolData[] = {
0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 
0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 
0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 
0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 
0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x03, 0x00, 0x01, 0x5C, 0x31, 0x5B, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x01, 0x0B, 0x01, 0x08, 0x00, 0x00, 0x0E, 0x00, 0x00, 
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x2D, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x85, 
0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x38, 0x2D, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xA8, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 
0x94, 0x0D, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 
0x2E, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00, 0xA8, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00, 
0x0C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x70, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 
0x60, 0x21, 0x00, 0x00, 0xD8, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x42, 0x7E, 0x01, 0x00, 0x00, 0x04, 0x6F, 0x09, 0x00, 0x00, 0x06, 0x6F, 0x07, 0x00, 0x00, 0x06, 
0x2A, 0x32, 0x7E, 0x01, 0x00, 0x00, 0x04, 0x02, 0x6F, 0x0A, 0x00, 0x00, 0x06, 0x2A, 0x56, 0x7E, 
0x01, 0x00, 0x00, 0x04, 0x6F, 0x09, 0x00, 0x00, 0x06, 0x6F, 0x08, 0x00, 0x00, 0x06, 0x28, 0x04, 
0x00, 0x00, 0x0A, 0x2A, 0x4E, 0x28, 0x0E, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x72, 0x01, 0x00, 0x00, 
0x70, 0x2A, 0x72, 0x11, 0x00, 0x00, 0x70, 0x2A, 0x1B, 0x30, 0x03, 0x00, 0x9D, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x11, 0x02, 0x8E, 0x69, 0x17, 0x2F, 0x01, 0x2A, 0x72, 0x21, 0x00, 0x00, 0x70, 
0x0A, 0x02, 0x16, 0x9A, 0x28, 0x06, 0x00, 0x00, 0x0A, 0x6F, 0x07, 0x00, 0x00, 0x0A, 0x0B, 0x07, 
0x72, 0x23, 0x00, 0x00, 0x70, 0x28, 0x08, 0x00, 0x00, 0x0A, 0x2D, 0x08, 0x28, 0x01, 0x00, 0x00, 
0x06, 0x0A, 0x2B, 0x4B, 0x07, 0x72, 0x4B, 0x00, 0x00, 0x70, 0x28, 0x08, 0x00, 0x00, 0x0A, 0x2D, 
0x12, 0x02, 0x8E, 0x69, 0x18, 0x2F, 0x02, 0xDE, 0x57, 0x02, 0x17, 0x9A, 0x28, 0x02, 0x00, 0x00, 
0x06, 0x2B, 0x2C, 0x07, 0x72, 0x63, 0x00, 0x00, 0x70, 0x28, 0x08, 0x00, 0x00, 0x0A, 0x2D, 0x08, 
0x28, 0x03, 0x00, 0x00, 0x06, 0x0A, 0x2B, 0x17, 0x07, 0x72, 0x97, 0x00, 0x00, 0x70, 0x28, 0x08, 
0x00, 0x00, 0x0A, 0x2D, 0x08, 0x28, 0x04, 0x00, 0x00, 0x06, 0x0A, 0x2B, 0x02, 0xDE, 0x21, 0xDE, 
0x09, 0x26, 0x72, 0x21, 0x00, 0x00, 0x70, 0x0A, 0xDE, 0x00, 0x28, 0x06, 0x00, 0x00, 0x0A, 0x06, 
0x16, 0x8D, 0x01, 0x00, 0x00, 0x01, 0x28, 0x09, 0x00, 0x00, 0x0A, 0x28, 0x0A, 0x00, 0x00, 0x0A, 
0x2A, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x62, 0x7D, 0x00, 0x09, 
0x01, 0x00, 0x00, 0x01, 0x2E, 0x73, 0x0D, 0x00, 0x00, 0x06, 0x80, 0x01, 0x00, 0x00, 0x04, 0x2A, 
0x42, 0x53, 0x4A, 0x42, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x76, 0x32, 0x2E, 0x30, 0x2E, 0x35, 0x30, 0x37, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 
0x6C, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00, 0x00, 0x23, 0x7E, 0x00, 0x00, 0x90, 0x04, 0x00, 0x00, 
0x28, 0x04, 0x00, 0x00, 0x23, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 
0xB8, 0x08, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x23, 0x55, 0x53, 0x00, 0x70, 0x09, 0x00, 0x00, 
0x10, 0x00, 0x00, 0x00, 0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 0x80, 0x09, 0x00, 0x00, 
0x58, 0x02, 0x00, 0x00, 0x23, 0x42, 0x6C, 0x6F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x02, 0x00, 0x00, 0x01, 0x57, 0x77, 0xA2, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0xFA, 0x01, 0x33, 
0x00, 0x16, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
0x15, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
0x89, 0x00, 0x82, 0x00, 0x06, 0x00, 0x80, 0x01, 0x60, 0x01, 0x06, 0x00, 0xA0, 0x01, 0x60, 0x01, 
0x06, 0x00, 0xE4, 0x01, 0xC8, 0x01, 0x06, 0x00, 0xFB, 0x01, 0xC8, 0x01, 0x06, 0x00, 0x22, 0x02, 
0x18, 0x02, 0x06, 0x00, 0x33, 0x02, 0x82, 0x00, 0x06, 0x00, 0x60, 0x02, 0x4B, 0x02, 0x06, 0x00, 
0x81, 0x02, 0x82, 0x00, 0x06, 0x00, 0x98, 0x02, 0x82, 0x00, 0x06, 0x00, 0xAF, 0x02, 0x82, 0x00, 
0x06, 0x00, 0xE7, 0x02, 0xC8, 0x02, 0x06, 0x00, 0xFA, 0x02, 0xC8, 0x02, 0x06, 0x00, 0x08, 0x03, 
0xC8, 0x02, 0x06, 0x00, 0x1F, 0x03, 0xC8, 0x02, 0x06, 0x00, 0x30, 0x03, 0x60, 0x01, 0x06, 0x00, 
0x44, 0x03, 0x60, 0x01, 0x06, 0x00, 0x56, 0x03, 0xC8, 0x02, 0x06, 0x00, 0x69, 0x03, 0xC8, 0x02, 
0x06, 0x00, 0x77, 0x03, 0xC8, 0x02, 0x06, 0x00, 0x95, 0x03, 0xC8, 0x02, 0x06, 0x00, 0xA1, 0x03, 
0xC8, 0x02, 0x06, 0x00, 0xB2, 0x03, 0x82, 0x00, 0x06, 0x00, 0xB7, 0x03, 0xC8, 0x02, 0x06, 0x00, 
0xCF, 0x03, 0xC8, 0x02, 0x06, 0x00, 0xE2, 0x03, 0xC8, 0x02, 0x06, 0x00, 0xF7, 0x03, 0xC8, 0x02, 
0x06, 0x00, 0x08, 0x04, 0xC8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x01, 0x00, 0x81, 0x01, 0x10, 0x00, 0x18, 0x00, 0x2E, 0x00, 0x05, 0x00, 0x01, 0x00, 
0x01, 0x00, 0xA2, 0x10, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 
0xA2, 0x10, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09, 0x00, 0xA2, 0x10, 
0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x02, 0x10, 0x10, 0x00, 
0x59, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x83, 0x01, 0x10, 0x00, 0x6B, 0x00, 
0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x0E, 0x00, 0x11, 0x00, 0x90, 0x00, 0x0A, 0x00, 0x50, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x96, 0x40, 0x9D, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x61, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x96, 0x40, 0xB1, 0x00, 0x12, 0x00, 0x01, 0x00, 0x6E, 0x20, 0x00, 0x00, 0x00, 0x00, 
0x96, 0x40, 0xBD, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 
0xD7, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x98, 0x20, 0x00, 0x00, 0x00, 0x00, 0x96, 0x40, 0xE6, 0x00, 
0x17, 0x00, 0x02, 0x00, 0x54, 0x21, 0x00, 0x00, 0x00, 0x00, 0x91, 0x18, 0xC1, 0x02, 0xF6, 0x00, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0xC6, 0x0D, 0xEB, 0x00, 0x1D, 0x00, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0xC6, 0x0D, 0xFB, 0x00, 0x1D, 0x00, 0x04, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x10, 0xC6, 0x0D, 0x23, 0x01, 0x25, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0x10, 0xC6, 0x05, 0x34, 0x01, 0x2A, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 
0xC6, 0x01, 0x34, 0x01, 0x2A, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0xC6, 0x09, 
0x23, 0x01, 0x25, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x86, 0x18, 0x4C, 0x01, 
0x34, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x96, 0x20, 0x52, 0x01, 0x38, 0x00, 
0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0A, 0x02, 0x00, 0x00, 0x01, 0x00, 0x46, 0x02, 0x00, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x20, 0x01, 0x00, 0x87, 0x03, 0x01, 0x20, 0x01, 0x00, 0x87, 0x03, 0x00, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x10, 0x00, 0x06, 0x00, 0x14, 0x00, 
0x06, 0x00, 0x10, 0x00, 0x11, 0x00, 0x4C, 0x01, 0x3C, 0x00, 0x19, 0x00, 0x4C, 0x01, 0x34, 0x00, 
0x21, 0x00, 0x4C, 0x01, 0x41, 0x00, 0x31, 0x00, 0x27, 0x02, 0xCD, 0x00, 0x39, 0x00, 0x4C, 0x01, 
0x34, 0x00, 0x41, 0x00, 0x6C, 0x02, 0xD7, 0x00, 0x49, 0x00, 0x88, 0x02, 0xDC, 0x00, 0x49, 0x00, 
0x90, 0x02, 0xE2, 0x00, 0x49, 0x00, 0xA8, 0x02, 0xE8, 0x00, 0x59, 0x00, 0xB7, 0x02, 0x12, 0x00, 
0x61, 0x00, 0x4C, 0x01, 0x34, 0x00, 0x69, 0x00, 0x4C, 0x01, 0x2A, 0x00, 0x71, 0x00, 0x4C, 0x01, 
0x24, 0x01, 0x81, 0x00, 0x4C, 0x01, 0x33, 0x01, 0x91, 0x00, 0x4C, 0x01, 0x39, 0x01, 0xA1, 0x00, 
0x4C, 0x01, 0x3C, 0x00, 0xA9, 0x00, 0x4C, 0x01, 0x34, 0x00, 0xB1, 0x00, 0x4C, 0x01, 0xA9, 0x01, 
0xC1, 0x00, 0x4C, 0x01, 0x0F, 0x02, 0xD1, 0x00, 0x4C, 0x01, 0x1E, 0x02, 0xE1, 0x00, 0x4C, 0x01, 
0x2A, 0x00, 0x29, 0x00, 0x83, 0x00, 0x41, 0x01, 0x2E, 0x00, 0x0B, 0x00, 0x2F, 0x02, 0x2E, 0x00, 
0x13, 0x00, 0x38, 0x02, 0x49, 0x00, 0x83, 0x00, 0x4A, 0x01, 0x63, 0x00, 0x6B, 0x00, 0x2A, 0x01, 
0x63, 0x00, 0x63, 0x00, 0xFA, 0x00, 0x69, 0x00, 0x83, 0x00, 0x41, 0x01, 0x83, 0x00, 0x63, 0x00, 
0x53, 0x01, 0x83, 0x00, 0x6B, 0x00, 0x2A, 0x01, 0x89, 0x00, 0x83, 0x00, 0x41, 0x01, 0xA0, 0x00, 
0x2B, 0x00, 0xD2, 0x00, 0xA3, 0x00, 0x93, 0x00, 0xAF, 0x01, 0xA3, 0x00, 0x63, 0x00, 0x7F, 0x01, 
0xC3, 0x00, 0x9B, 0x00, 0x15, 0x02, 0xC3, 0x00, 0xA3, 0x00, 0x24, 0x02, 0xC3, 0x00, 0x63, 0x00, 
0xE5, 0x01, 0x07, 0x00, 0x3F, 0x01, 0x09, 0x00, 0x3F, 0x01, 0x0B, 0x00, 0x7D, 0x01, 0x0D, 0x00, 
0x3F, 0x01, 0x0F, 0x00, 0x3F, 0x01, 0x11, 0x00, 0x7D, 0x01, 0x13, 0x00, 0x2D, 0x02, 0x06, 0x00, 
0x05, 0x00, 0x47, 0x00, 0x06, 0x00, 0x09, 0x00, 0x47, 0x00, 0x06, 0x00, 0x0D, 0x00, 0x47, 0x00, 
0x06, 0x00, 0x15, 0x00, 0x47, 0x00, 0xF1, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x03, 0x00, 
0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x21, 0x00, 0x00, 0x00, 0x17, 0x01, 0x21, 0x00, 
0x00, 0x00, 0x3F, 0x01, 0x2F, 0x00, 0x00, 0x00, 0x3F, 0x01, 0x2F, 0x00, 0x02, 0x00, 0x07, 0x00, 
0x03, 0x00, 0x02, 0x00, 0x08, 0x00, 0x05, 0x00, 0x02, 0x00, 0x09, 0x00, 0x07, 0x00, 0x02, 0x00, 
0x0C, 0x00, 0x09, 0x00, 0x1B, 0x04, 0x00, 0x01, 0x1D, 0x00, 0x52, 0x01, 0x01, 0x00, 0x04, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xBE, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 
0x05, 0x00, 0x02, 0x00, 0x06, 0x00, 0x02, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3C, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x3E, 0x00, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x54, 
0x6F, 0x6F, 0x6C, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 
0x61, 0x67, 0x65, 0x72, 0x48, 0x65, 0x6C, 0x70, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x00, 0x54, 0x68, 
0x65, 0x6D, 0x65, 0x41, 0x70, 0x69, 0x00, 0x49, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x00, 0x49, 0x54, 
0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x00, 0x54, 0x68, 0x65, 0x6D, 
0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x00, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 
0x6E, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x00, 0x4E, 0x61, 0x74, 0x69, 0x76, 
0x65, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x00, 0x6D, 0x73, 0x63, 0x6F, 0x72, 0x6C, 0x69, 
0x62, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00, 
0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x00, 0x47, 0x65, 0x74, 
0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x4E, 0x61, 0x6D, 0x65, 
0x00, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x00, 0x47, 0x65, 0x74, 
0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6C, 0x53, 0x74, 0x79, 
0x6C, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x53, 
0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x4D, 0x61, 0x69, 0x6E, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x44, 
0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x56, 
0x69, 0x73, 0x75, 0x61, 0x6C, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x00, 0x44, 0x69, 0x73, 0x70, 0x6C, 
0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6C, 0x53, 0x74, 0x79, 
0x6C, 0x65, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x54, 0x68, 
0x65, 0x6D, 0x65, 0x00, 0x41, 0x70, 0x70, 0x6C, 0x79, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x00, 0x43, 
0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x00, 0x2E, 0x63, 0x74, 0x6F, 
0x72, 0x00, 0x49, 0x73, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 
0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2E, 0x43, 
0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 
0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x52, 0x65, 0x6C, 0x61, 0x78, 
0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 
0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 
0x6C, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x54, 0x68, 
0x65, 0x6D, 0x65, 0x54, 0x6F, 0x6F, 0x6C, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x53, 
0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2E, 0x50, 0x65, 0x72, 0x6D, 0x69, 0x73, 0x73, 0x69, 
0x6F, 0x6E, 0x73, 0x00, 0x50, 0x65, 0x72, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x65, 
0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x53, 0x65, 0x63, 0x75, 0x72, 
0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x46, 
0x69, 0x6C, 0x65, 0x50, 0x61, 0x74, 0x68, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x49, 
0x4F, 0x00, 0x50, 0x61, 0x74, 0x68, 0x00, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6C, 0x65, 0x4E, 0x61, 
0x6D, 0x65, 0x00, 0x53, 0x54, 0x41, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x74, 0x72, 
0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x61, 0x72, 0x67, 0x73, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 
0x6D, 0x2E, 0x47, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x69, 0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 
0x43, 0x75, 0x6C, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6E, 0x66, 0x6F, 0x00, 0x67, 0x65, 0x74, 0x5F, 
0x49, 0x6E, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6E, 0x74, 0x43, 0x75, 0x6C, 0x74, 0x75, 0x72, 0x65, 
0x00, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x54, 0x6F, 0x4C, 0x6F, 0x77, 0x65, 0x72, 0x00, 
0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x00, 0x49, 0x46, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x50, 
0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00, 0x46, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x00, 0x43, 
0x6F, 0x6E, 0x73, 0x6F, 0x6C, 0x65, 0x00, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4C, 0x69, 0x6E, 0x65, 
0x00, 0x2E, 0x63, 0x63, 0x74, 0x6F, 0x72, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 
0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2E, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6F, 0x70, 0x53, 0x65, 
0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 0x43, 0x6F, 0x6D, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 
0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x47, 0x75, 0x69, 0x64, 0x41, 0x74, 
0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 
0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x43, 
0x6F, 0x6D, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x00, 
0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x49, 0x6D, 0x70, 0x6C, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 
0x75, 0x74, 0x65, 0x00, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x49, 0x6D, 0x70, 0x6C, 0x4F, 0x70, 
0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x4D, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6C, 0x41, 0x73, 0x41, 
0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x55, 0x6E, 0x6D, 0x61, 0x6E, 0x61, 0x67, 
0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x00, 0x44, 0x69, 0x73, 0x70, 0x49, 0x64, 0x41, 0x74, 0x74, 
0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x62, 0x73, 0x74, 0x72, 0x54, 0x68, 0x65, 0x6D, 0x65, 
0x50, 0x61, 0x74, 0x68, 0x00, 0x49, 0x6E, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 
0x00, 0x43, 0x6F, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
0x65, 0x00, 0x54, 0x79, 0x70, 0x65, 0x00, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x49, 0x6E, 0x74, 0x65, 
0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x43, 
0x6C, 0x61, 0x73, 0x73, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 
0x65, 0x00, 0x54, 0x79, 0x70, 0x65, 0x4C, 0x69, 0x62, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 
0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x54, 0x79, 0x70, 0x65, 0x4C, 0x69, 0x62, 0x54, 0x79, 
0x70, 0x65, 0x46, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 
0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x55, 0x78, 0x54, 0x68, 0x65, 
0x6D, 0x65, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x0F, 0x73, 0x00, 0x74, 0x00, 0x6F, 0x00, 
0x70, 0x00, 0x70, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x0F, 0x72, 0x00, 0x75, 0x00, 0x6E, 0x00, 
0x6E, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x00, 0x01, 0x00, 0x27, 0x67, 0x00, 0x65, 0x00, 
0x74, 0x00, 0x63, 0x00, 0x75, 0x00, 0x72, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 
0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6D, 0x00, 
0x65, 0x00, 0x00, 0x17, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 
0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x33, 0x67, 0x00, 0x65, 0x00, 
0x74, 0x00, 0x63, 0x00, 0x75, 0x00, 0x72, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 
0x76, 0x00, 0x69, 0x00, 0x73, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x74, 0x00, 
0x79, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x1D, 
0x67, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 
0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x61, 0xE5, 0xD9, 0xBD, 0x60, 0x8C, 0xBA, 0x42, 0xA9, 0x91, 0xE8, 0x47, 0xCD, 0xA9, 0x15, 0x97, 
0x00, 0x08, 0xB7, 0x7A, 0x5C, 0x56, 0x19, 0x34, 0xE0, 0x89, 0x03, 0x06, 0x12, 0x10, 0x03, 0x00, 
0x00, 0x0E, 0x04, 0x00, 0x01, 0x01, 0x0E, 0x05, 0x00, 0x01, 0x01, 0x1D, 0x0E, 0x03, 0x20, 0x00, 
0x0E, 0x03, 0x28, 0x00, 0x0E, 0x04, 0x20, 0x00, 0x12, 0x0C, 0x04, 0x20, 0x01, 0x01, 0x0E, 0x04, 
0x28, 0x00, 0x12, 0x0C, 0x03, 0x20, 0x00, 0x01, 0x03, 0x00, 0x00, 0x02, 0x04, 0x20, 0x01, 0x01, 
0x08, 0x05, 0x20, 0x01, 0x01, 0x11, 0x15, 0x80, 0x84, 0x2E, 0x01, 0x7F, 0x53, 0x79, 0x73, 0x74, 
0x65, 0x6D, 0x2E, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2E, 0x50, 0x65, 0x72, 0x6D, 
0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x2E, 0x50, 0x65, 0x72, 0x6D, 0x69, 0x73, 0x73, 0x69, 
0x6F, 0x6E, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2C, 0x20, 
0x6D, 0x73, 0x63, 0x6F, 0x72, 0x6C, 0x69, 0x62, 0x2C, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 
0x6E, 0x3D, 0x32, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x30, 0x2C, 0x20, 0x43, 0x75, 0x6C, 0x74, 0x75, 
0x72, 0x65, 0x3D, 0x6E, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6C, 0x2C, 0x20, 0x50, 0x75, 0x62, 0x6C, 
0x69, 0x63, 0x4B, 0x65, 0x79, 0x54, 0x6F, 0x6B, 0x65, 0x6E, 0x3D, 0x62, 0x37, 0x37, 0x61, 0x35, 
0x63, 0x35, 0x36, 0x31, 0x39, 0x33, 0x34, 0x65, 0x30, 0x38, 0x39, 0x01, 0x00, 0x04, 0x00, 0x01, 
0x0E, 0x0E, 0x04, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x12, 0x21, 0x05, 0x20, 0x01, 0x0E, 
0x12, 0x21, 0x05, 0x00, 0x02, 0x08, 0x0E, 0x0E, 0x08, 0x00, 0x03, 0x0E, 0x12, 0x29, 0x0E, 0x1D, 
0x1C, 0x04, 0x07, 0x02, 0x0E, 0x0E, 0x03, 0x00, 0x00, 0x01, 0x29, 0x01, 0x00, 0x24, 0x44, 0x32, 
0x33, 0x43, 0x43, 0x37, 0x33, 0x33, 0x2D, 0x35, 0x35, 0x32, 0x32, 0x2D, 0x34, 0x30, 0x36, 0x44, 
0x2D, 0x38, 0x44, 0x46, 0x42, 0x2D, 0x42, 0x33, 0x43, 0x46, 0x35, 0x45, 0x46, 0x35, 0x32, 0x41, 
0x37, 0x31, 0x00, 0x00, 0x05, 0x20, 0x01, 0x01, 0x11, 0x3D, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x05, 0x20, 0x01, 0x01, 0x11, 0x45, 0x05, 0x20, 0x01, 0x01, 0x11, 0x4D, 0x01, 
0x13, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x08, 0x01, 0x00, 0x01, 0x00, 0x01, 
0x60, 0x00, 0x00, 0x29, 0x01, 0x00, 0x24, 0x30, 0x36, 0x34, 0x36, 0x45, 0x42, 0x42, 0x45, 0x2D, 
0x43, 0x31, 0x42, 0x37, 0x2D, 0x34, 0x30, 0x34, 0x35, 0x2D, 0x38, 0x46, 0x44, 0x30, 0x2D, 0x46, 
0x46, 0x44, 0x36, 0x35, 0x44, 0x33, 0x46, 0x43, 0x37, 0x39, 0x32, 0x00, 0x00, 0x01, 0x1C, 0x29, 
0x01, 0x00, 0x24, 0x41, 0x32, 0x43, 0x35, 0x36, 0x43, 0x32, 0x41, 0x2D, 0x45, 0x36, 0x33, 0x41, 
0x2D, 0x34, 0x33, 0x33, 0x45, 0x2D, 0x39, 0x39, 0x35, 0x33, 0x2D, 0x39, 0x32, 0x45, 0x39, 0x34, 
0x46, 0x30, 0x31, 0x32, 0x32, 0x45, 0x41, 0x00, 0x00, 0x05, 0x20, 0x01, 0x01, 0x12, 0x5D, 0x35, 
0x01, 0x00, 0x30, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x41, 0x70, 0x69, 0x2E, 0x54, 0x68, 0x65, 0x6D, 
0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x48, 0x65, 0x6C, 0x70, 0x43, 0x6C, 0x61, 0x73, 
0x73, 0x2B, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6C, 
0x61, 0x73, 0x73, 0x00, 0x00, 0x29, 0x01, 0x00, 0x24, 0x43, 0x30, 0x34, 0x42, 0x33, 0x32, 0x39, 
0x45, 0x2D, 0x35, 0x38, 0x32, 0x33, 0x2D, 0x34, 0x34, 0x31, 0x35, 0x2D, 0x39, 0x43, 0x39, 0x33, 
0x2D, 0x42, 0x41, 0x34, 0x34, 0x36, 0x38, 0x38, 0x39, 0x34, 0x37, 0x42, 0x30, 0x00, 0x00, 0x05, 
0x20, 0x01, 0x01, 0x11, 0x65, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 
0x01, 0x01, 0x11, 0x6D, 0x08, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x08, 
0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x01, 0x00, 0x54, 0x02, 0x16, 
0x57, 0x72, 0x61, 0x70, 0x4E, 0x6F, 0x6E, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 
0x54, 0x68, 0x72, 0x6F, 0x77, 0x73, 0x01, 0x00, 0x60, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x7E, 0x2D, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x70, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x5F, 0x43, 0x6F, 0x72, 0x45, 0x78, 0x65, 0x4D, 0x61, 0x69, 0x6E, 0x00, 0x6D, 0x73, 
0x63, 0x6F, 0x72, 0x65, 0x65, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x25, 
0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x4C, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x02, 0x34, 0x00, 0x00, 0x00, 0x56, 0x00, 
0x53, 0x00, 0x5F, 0x00, 0x56, 0x00, 0x45, 0x00, 0x52, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4F, 0x00, 
0x4E, 0x00, 0x5F, 0x00, 0x49, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xBD, 0x04, 0xEF, 0xFE, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x56, 0x00, 0x61, 0x00, 0x72, 0x00, 
0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x00, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 
0x6E, 0x00, 0x73, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x04, 0xAC, 0x01, 0x00, 0x00, 0x01, 0x00, 0x53, 0x00, 
0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 
0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 
0x01, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x34, 0x00, 0x62, 0x00, 
0x30, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 
0x65, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 
0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
0x30, 0x00, 0x08, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x56, 0x00, 
0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00, 
0x3C, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 
0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 
0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x6F, 0x00, 
0x6C, 0x00, 0x2E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x28, 0x00, 0x02, 0x00, 
0x01, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x43, 0x00, 0x6F, 0x00, 
0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x00, 0x00, 
0x20, 0x00, 0x00, 0x00, 0x44, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x4F, 0x00, 0x72, 0x00, 0x69, 0x00, 
0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 
0x65, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x54, 0x00, 0x68, 0x00, 
0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x2E, 0x00, 
0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x34, 0x00, 0x08, 0x00, 0x01, 0x00, 0x50, 0x00, 
0x72, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x56, 0x00, 0x65, 0x00, 
0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2E, 0x00, 
0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x08, 0x00, 
0x01, 0x00, 0x41, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6C, 0x00, 
0x79, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 
0x6E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x20, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x90, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const size_t themeToolSize = sizeof(themeToolData);

HANDLE g_timerThread = nullptr;
HANDLE g_wakeEvent = nullptr;
bool g_exitFlag = false;
SYSTEMTIME g_lightTime, g_darkTime;
std::wstring g_lightThemePath, g_darkThemePath;

enum Appearance {
    light,
    dark
};

void ApplyLockScreen() {
    std::wstring wallpaperPath;
    wchar_t currentWallpaper[MAX_PATH] = {0};
    DWORD size = sizeof(currentWallpaper);

    if (RegGetValueW(HKEY_CURRENT_USER, L"Control Panel\\Desktop", L"WallPaper", RRF_RT_REG_SZ, nullptr, currentWallpaper, &size) != ERROR_SUCCESS)
    {
        return;
    }
        
    wallpaperPath = currentWallpaper;

    HKEY hKey;
    if (RegCreateKeyExW(HKEY_LOCAL_MACHINE, L"SOFTWARE\\Policies\\Microsoft\\Windows\\Personalization", 0, nullptr, 0, KEY_SET_VALUE, nullptr, &hKey, nullptr) == ERROR_SUCCESS)
    {
        RegSetValueExW(hKey, L"LockScreenImage", 0, REG_SZ, (const BYTE*)wallpaperPath.c_str(), (DWORD)((wallpaperPath.size() + 1) * sizeof(wchar_t)));
        RegCloseKey(hKey);
    }

    if (RegCreateKeyExW(HKEY_LOCAL_MACHINE, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PersonalizationCSP", 0, nullptr, 0, KEY_SET_VALUE, nullptr, &hKey, nullptr) == ERROR_SUCCESS)
    {
        for (const wchar_t* valueName : { L"LockScreenImagePath", L"LockScreenImageUrl" }) {
            RegSetValueExW(hKey, valueName, 0, REG_SZ, (const BYTE*)wallpaperPath.c_str(), (DWORD)((wallpaperPath.size() + 1) * sizeof(wchar_t)));
        }
        RegCloseKey(hKey);
    }

    Wh_Log(L"[Theme] Applied as Lock Screen");
}

bool IsAppearanceApplied(Appearance appearance) {
    DWORD val = (appearance == light) ? 1 : 0, current = 1, size = sizeof(DWORD);

    RegGetValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"AppsUseLightTheme", RRF_RT_REG_DWORD, nullptr, &current, &size);
    if (current != val) return false;

    RegGetValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"SystemUsesLightTheme", RRF_RT_REG_DWORD, nullptr, &current, &size);
    return current == val;
}

bool IsThemeApplied(const wchar_t* themePath) {
    wchar_t currentTheme[MAX_PATH] = {0};
    DWORD size = sizeof(currentTheme);

    if (RegGetValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes", L"CurrentTheme", RRF_RT_REG_SZ, nullptr, currentTheme, &size) != ERROR_SUCCESS)
        return false;
    if (_wcsicmp(currentTheme, themePath) != 0)
        return false;

    DWORD appsLight = 1, systemLight = 1, dataSize = sizeof(DWORD);
    RegGetValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"AppsUseLightTheme", RRF_RT_REG_DWORD, nullptr, &appsLight, &dataSize);
    RegGetValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"SystemUsesLightTheme", RRF_RT_REG_DWORD, nullptr, &systemLight, &dataSize);

    std::wifstream file(themePath);
    if (!file)
        return false;

    std::wstring line, systemMode, appMode;
    bool inVisualStyles = false;
    while (std::getline(file, line)) {
        if (line.empty() || line[0] == L';') continue;
        if (line[0] == L'[') {
            inVisualStyles = (line == L"[VisualStyles]");
            continue;
        }
        if (inVisualStyles) {
            if (line.find(L"SystemMode=") == 0)
                systemMode = line.substr(11);
            else if (line.find(L"AppMode=") == 0)
                appMode = line.substr(8);
            if (!systemMode.empty() && !appMode.empty())
                break;
        }
    }

    auto isLight = [](const std::wstring& s) { return _wcsicmp(s.c_str(), L"Light") == 0; };
    bool themeLight = isLight(systemMode) && isLight(appMode);

    return (appsLight == (themeLight ? 1 : 0)) && (systemLight == (themeLight ? 1 : 0));
}

void ApplyAppearance(Appearance appearance) {
    DWORD val = (appearance == light) ? 1 : 0;

    // change appearance
    RegSetKeyValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"AppsUseLightTheme", REG_DWORD, &val, sizeof(val));
    RegSetKeyValueW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", L"SystemUsesLightTheme", REG_DWORD, &val, sizeof(val));

    // broadcast the change
    SendMessageTimeoutW(HWND_BROADCAST, WM_SETTINGCHANGE, 0, (LPARAM)L"ImmersiveColorSet", SMTO_ABORTIFHUNG, 100, nullptr);

    Wh_Log(L"[Theme] Applied %s Mode.", appearance == light ? L"Light" : L"Dark");

    // apply wallpaper to lock screen
    if (Wh_GetIntSetting(L"LockScreen"))
        ApplyLockScreen();
}

void ApplyTheme(const wchar_t* themePath) {
    std::thread([=]() {
        // check if explorer is loaded
        Wh_Log(L"[Theme] Waiting for explorer to load...");
        for (;;) {
            HWND progman = FindWindowW(L"Progman", nullptr);
            HWND tray = FindWindowW(L"Shell_TrayWnd", nullptr);
            if (progman && tray && IsWindowVisible(tray)) break;
            Sleep(500);
        }
        Wh_Log(L"[Theme] Explorer loaded");

        wchar_t toolPath[MAX_PATH];
        GetTempPathW(MAX_PATH, toolPath);
        wcscat_s(toolPath, L"ThemeTool.exe");

        // write themetool to temp
        std::ofstream file(toolPath, std::ios::binary);
        if (!file) {
            Wh_Log(L"[ThemeTool] Failed to write ThemeTool: %s", toolPath);
            return;
        }
        file.write(reinterpret_cast<const char*>(themeToolData), themeToolSize);
        file.close();

        Wh_Log(L"[ThemeTool] Written to %s", toolPath);

        // change theme using themetool
        wchar_t cmd[1024];
        swprintf(cmd, 1024, L"\"%s\" ChangeTheme \"%s\"", toolPath, themePath);
        Wh_Log(L"[ThemeTool] Changing theme using ThemeTool");

        STARTUPINFOW si = { sizeof(si) };
        PROCESS_INFORMATION pi;

        if (CreateProcessW(nullptr, cmd, nullptr, nullptr, FALSE, CREATE_NO_WINDOW, nullptr, nullptr, &si, &pi)) {
            CloseHandle(pi.hThread);
            WaitForSingleObject(pi.hProcess, INFINITE);
            CloseHandle(pi.hProcess);
        } else {
            DWORD err = GetLastError();
            Wh_Log(L"[ThemeTool] Failed to launch theme tool. Error code: %u", err);
        }

        // delete themetool
        if (DeleteFileW(toolPath)) {
            Wh_Log(L"[ThemeTool] Deleted %s", toolPath);
        } else {
            Wh_Log(L"[ThemeTool] Failed to delete %s", toolPath);
        }

        // apply wallpaper to lock screen
        if (Wh_GetIntSetting(L"LockScreen"))
            ApplyLockScreen();
    }).detach();
}

SYSTEMTIME ParseScheduleTime(const wchar_t* timeStr) {
    SYSTEMTIME st = {};
    swscanf_s(timeStr, L"%hu:%hu", &st.wHour, &st.wMinute);
    return st;
}

time_t GetNextSwitch(const SYSTEMTIME& light, const SYSTEMTIME& dark, bool& nextLight) {
    time_t now = time(nullptr);
    struct tm local;
    localtime_s(&local, &now);

    auto makeTime = [&](const SYSTEMTIME& st) {
        struct tm t = local;
        t.tm_hour = st.wHour; t.tm_min = st.wMinute; t.tm_sec = 0;
        return mktime(&t);
    };

    time_t lightT = makeTime(light);
    time_t darkT = makeTime(dark);

    bool isLightNow;
    if (lightT < darkT)
        isLightNow = now >= lightT && now < darkT;
    else
        isLightNow = now >= lightT || now < darkT;

    if (isLightNow) {
        nextLight = false;
        if (darkT <= now) darkT += 86400;
        return darkT;
    } else {
        nextLight = true;
        if (lightT <= now) lightT += 86400;
        return lightT;
    }
}

DWORD WINAPI ThemeScheduler(LPVOID) {
    while (!g_exitFlag) {
        bool nextLight;
        time_t now = time(nullptr);
        time_t nextSwitch = GetNextSwitch(g_lightTime, g_darkTime, nextLight);
        int waitTime = (int)(nextSwitch - now);
        DWORD res = WaitForSingleObject(g_wakeEvent, waitTime * 1000);
        if (g_exitFlag) break;
        if (res == WAIT_OBJECT_0) continue;

        const wchar_t* themePath = nextLight ? g_lightThemePath.c_str() : g_darkThemePath.c_str();
        
        if (*themePath) {
            if (IsThemeApplied(themePath)) {
                Wh_Log(L"[Theme] Theme already applied.");
                continue;
            }
            ApplyTheme(themePath);
        } else {
            if (IsAppearanceApplied(nextLight ? light : dark)) {
                Wh_Log(L"[Theme] Appearance already applied.");
                continue;
            }
            ApplyAppearance(nextLight ? light : dark);
        }
    }
    return 0;
}

void StartScheduler() {
    if (g_timerThread) {
        SetEvent(g_wakeEvent);
        return;
    }
    g_wakeEvent = CreateEventW(nullptr, FALSE, FALSE, nullptr);
    g_timerThread = CreateThread(nullptr, 0, ThemeScheduler, nullptr, 0, nullptr);
}

std::wstring TrimQuotes(const std::wstring& str) {
    size_t start = 0;
    size_t end = str.length();
    if (!str.empty() && str.front() == L'"') start = 1;
    if (end > start && str[end - 1] == L'"') end--;
    return str.substr(start, end - start);
}

void LoadSettings() {
    g_lightTime = ParseScheduleTime(Wh_GetStringSetting(L"Light"));
    g_darkTime = ParseScheduleTime(Wh_GetStringSetting(L"Dark"));

    auto rawLightPath = Wh_GetStringSetting(L"LightThemePath");
    g_lightThemePath = rawLightPath ? TrimQuotes(rawLightPath) : L"";

    auto rawDarkPath = Wh_GetStringSetting(L"DarkThemePath");
    g_darkThemePath = rawDarkPath ? TrimQuotes(rawDarkPath) : L"";

    time_t now = time(nullptr);
    struct tm local;
    localtime_s(&local, &now);

    auto makeTime = [&](const SYSTEMTIME& st) {
        struct tm t = local;
        t.tm_hour = st.wHour; t.tm_min = st.wMinute; t.tm_sec = 0;
        return mktime(&t);
    };

    time_t lightT = makeTime(g_lightTime);
    time_t darkT = makeTime(g_darkTime);

    bool isLightNow;
    if (lightT < darkT)
        isLightNow = now >= lightT && now < darkT;
    else
        isLightNow = now >= lightT || now < darkT;
    
    const wchar_t* themePath = isLightNow ? g_lightThemePath.c_str() : g_darkThemePath.c_str();
    if (*themePath) {
        if (IsThemeApplied(themePath)) {
            Wh_Log(L"[Theme] Theme already applied.");
            return;
        }
        ApplyTheme(themePath);
    } else {
        if (IsAppearanceApplied(isLightNow ? light : dark)) {
            Wh_Log(L"[Theme] Appearance already applied.");
            return;
        }
        ApplyAppearance(isLightNow ? light : dark);
    }

    StartScheduler();
}

BOOL Wh_ModInit() {
    LoadSettings();
    return TRUE;
}

void Wh_ModSettingsChanged() {
    LoadSettings();
}

void Wh_ModUninit() {
    g_exitFlag = true;
    if (g_wakeEvent) SetEvent(g_wakeEvent);
    if (g_timerThread) {
        WaitForSingleObject(g_timerThread, INFINITE);
        CloseHandle(g_timerThread);
    }
    if (g_wakeEvent) CloseHandle(g_wakeEvent);
}
